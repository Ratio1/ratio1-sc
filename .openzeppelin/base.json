{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x8cEa8b574FbF20B9D2548f357B9Bf6DeA5A2204A",
    "txHash": "0x9989b2bcded36a369159ca202b98e9939df181a791bcd7136dbae027197604d6"
  },
  "proxies": [
    {
      "address": "0x0C431e546371C87354714Fcc1a13365391A549E2",
      "txHash": "0xfa6f0456b38466635dcbe39582e82aee77d5c660acd62b2e00428746f884b402",
      "kind": "transparent"
    },
    {
      "address": "0xE658DF6dA3FB5d4FBa562F1D5934bd0F9c6bd423",
      "txHash": "0x66e9c1e52f669ff1c948681c6f1134d2208720f9323fe4d6e9d3414ae2c4e3d0",
      "kind": "transparent"
    },
    {
      "address": "0xa2fDD4c7E93790Ff68a01f01AA789D619F12c6AC",
      "txHash": "0x4c383c9887756784dbfdbf912736dfffedc2d217f16ce4fd4ec7ef8d01778418",
      "kind": "transparent"
    }
  ],
  "impls": {
    "d85e23ef751c04e135e2019587d24c4086f4b10190be7241e5d82826d98943b0": {
      "address": "0x9964A5dfc860626c3b30FB764162773cD1D4Ad95",
      "txHash": "0x66dd83d1f6ee334c085df6ec95de49cced4b0e59db446566d4100249f5f27baa",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "LOGISTIC_PLATEAU",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:75"
          },
          {
            "label": "K",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:76"
          },
          {
            "label": "MID_PRC",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:77"
          },
          {
            "label": "_supply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:93"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:94"
          },
          {
            "label": "_R1Token",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(R1)22661",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:96"
          },
          {
            "label": "_controller",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(Controller)18113",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:97"
          },
          {
            "label": "_ndContract",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IND)18142",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:98"
          },
          {
            "label": "lpWallet",
            "offset": 0,
            "slot": "8",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:99"
          },
          {
            "label": "expensesWallet",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:100"
          },
          {
            "label": "marketingWallet",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:101"
          },
          {
            "label": "grantsWallet",
            "offset": 0,
            "slot": "11",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:102"
          },
          {
            "label": "csrWallet",
            "offset": 0,
            "slot": "12",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:103"
          },
          {
            "label": "totalLicensesAssignedTokensAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:105"
          },
          {
            "label": "licenses",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(License)18173_storage)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:106"
          },
          {
            "label": "registeredNodeAddresses",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:107"
          },
          {
            "label": "nodeToLicenseId",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:108"
          },
          {
            "label": "initiatedTransferReceiver",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_address)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:110"
          },
          {
            "label": "initiatedBurn",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:111"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(Controller)18113": {
            "label": "contract Controller",
            "numberOfBytes": "20"
          },
          "t_contract(IND)18142": {
            "label": "contract IND",
            "numberOfBytes": "20"
          },
          "t_contract(R1)22661": {
            "label": "contract R1",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(License)18173_storage)": {
            "label": "mapping(uint256 => struct License)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(License)18173_storage": {
            "label": "struct License",
            "members": [
              {
                "label": "nodeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalAssignedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalClaimedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "firstMiningEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lastClaimEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "assignTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "lastClaimOracle",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_userDefinedValueType(SD59x18)14517": {
            "label": "SD59x18",
            "numberOfBytes": "32",
            "underlying": "t_int256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "06c165a4b8840408819e83f3c43766d840f8d265c742365fb146f84f448ab0d4": {
      "address": "0xAb2F1F31489BAa339d58470737dD6E5d55484261",
      "txHash": "0x03d16626a2b4c6d7873c0033e6f69ba57240f5867bd029686c5e6937aa324d22",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:96"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:97"
          },
          {
            "label": "currentPriceTier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:98"
          },
          {
            "label": "_R1Token",
            "offset": 1,
            "slot": "2",
            "type": "t_contract(R1)13122",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:100"
          },
          {
            "label": "_controller",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(Controller)10443",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:101"
          },
          {
            "label": "_uniswapV2Router",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IUniswapV2Router02)9976",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:102"
          },
          {
            "label": "_uniswapV2Pair",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IUniswapV2Pair)9580",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:103"
          },
          {
            "label": "_usdcAddr",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:104"
          },
          {
            "label": "_mndContract",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IMND)10466",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:105"
          },
          {
            "label": "lpWallet",
            "offset": 0,
            "slot": "8",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:106"
          },
          {
            "label": "companyWallet",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:107"
          },
          {
            "label": "vatReceiverWallet",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:108"
          },
          {
            "label": "_priceTiers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint8,t_struct(PriceTier)10489_storage)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:110"
          },
          {
            "label": "licenses",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(License)10502_storage)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:111"
          },
          {
            "label": "registeredNodeAddresses",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:112"
          },
          {
            "label": "nodeToLicenseId",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:113"
          },
          {
            "label": "userUsdMintedAmount",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:114"
          },
          {
            "label": "usedInvoiceUUIDs",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:115"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(Controller)10443": {
            "label": "contract Controller",
            "numberOfBytes": "20"
          },
          "t_contract(IMND)10466": {
            "label": "contract IMND",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Pair)9580": {
            "label": "contract IUniswapV2Pair",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Router02)9976": {
            "label": "contract IUniswapV2Router02",
            "numberOfBytes": "20"
          },
          "t_contract(R1)13122": {
            "label": "contract R1",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(License)10502_storage)": {
            "label": "mapping(uint256 => struct License)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_struct(PriceTier)10489_storage)": {
            "label": "mapping(uint8 => struct PriceTier)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(License)10502_storage": {
            "label": "struct License",
            "members": [
              {
                "label": "nodeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalClaimedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastClaimEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "assignTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lastClaimOracle",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "isBanned",
                "type": "t_bool",
                "offset": 20,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(PriceTier)10489_storage": {
            "label": "struct PriceTier",
            "members": [
              {
                "label": "usdPrice",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalUnits",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "soldUnits",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "c83848f0d7ec3ac88ba43df7a7ca8164af009f6dcf10623d160129b7a6c1d99b": {
      "address": "0xeaD1896801022aBaC2279c27de780342c6C4ce53",
      "txHash": "0xd015cb61e86b80e23963b2243d71c85b6c8c2d1616c18a7d33beac8014a1534b",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "ndContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IND)23157",
            "contract": "Reader",
            "src": "contracts/Reader.sol:73"
          },
          {
            "label": "mndContract",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IMND)23168",
            "contract": "Reader",
            "src": "contracts/Reader.sol:74"
          }
        ],
        "types": {
          "t_contract(IMND)23168": {
            "label": "contract IMND",
            "numberOfBytes": "20"
          },
          "t_contract(IND)23157": {
            "label": "contract IND",
            "numberOfBytes": "20"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "4b044ef171f0c18001e5e0021aefe34040e1d0129d3c468894d132cebe652387": {
      "address": "0x3814A2110f2269d773a90F5F24fdfE4cb89823ea",
      "txHash": "0x1062fcd43812157d0cdca7b802b2e34a2febe815a9ff44d4edc2a8186ec0a172",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "LOGISTIC_PLATEAU",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:75"
          },
          {
            "label": "K",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:76"
          },
          {
            "label": "MID_PRC",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:77"
          },
          {
            "label": "_supply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:93"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:94"
          },
          {
            "label": "_R1Token",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(R1)22763",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:96"
          },
          {
            "label": "_controller",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(Controller)18113",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:97"
          },
          {
            "label": "_ndContract",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IND)18142",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:98"
          },
          {
            "label": "lpWallet",
            "offset": 0,
            "slot": "8",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:99"
          },
          {
            "label": "expensesWallet",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:100"
          },
          {
            "label": "marketingWallet",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:101"
          },
          {
            "label": "grantsWallet",
            "offset": 0,
            "slot": "11",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:102"
          },
          {
            "label": "csrWallet",
            "offset": 0,
            "slot": "12",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:103"
          },
          {
            "label": "totalLicensesAssignedTokensAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:105"
          },
          {
            "label": "licenses",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(License)18173_storage)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:106"
          },
          {
            "label": "registeredNodeAddresses",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:107"
          },
          {
            "label": "nodeToLicenseId",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:108"
          },
          {
            "label": "initiatedTransferReceiver",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_address)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:110"
          },
          {
            "label": "initiatedBurn",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:111"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(Controller)18113": {
            "label": "contract Controller",
            "numberOfBytes": "20"
          },
          "t_contract(IND)18142": {
            "label": "contract IND",
            "numberOfBytes": "20"
          },
          "t_contract(R1)22763": {
            "label": "contract R1",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(License)18173_storage)": {
            "label": "mapping(uint256 => struct License)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(License)18173_storage": {
            "label": "struct License",
            "members": [
              {
                "label": "nodeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalAssignedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalClaimedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "firstMiningEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lastClaimEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "assignTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "lastClaimOracle",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_userDefinedValueType(SD59x18)14517": {
            "label": "SD59x18",
            "numberOfBytes": "32",
            "underlying": "t_int256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "3466a59a84263e7a1c17c194b751e649c09236452993cae612a7bac566436326": {
      "address": "0x114f9995cc09cfc708533591cc93f2900Bb4997E",
      "txHash": "0xcba6a6431887ac3f0b60824c56473209debdb3b9a447c71756e23eb7975b9eca",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:96"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:97"
          },
          {
            "label": "currentPriceTier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:98"
          },
          {
            "label": "_R1Token",
            "offset": 1,
            "slot": "2",
            "type": "t_contract(R1)22763",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:100"
          },
          {
            "label": "_controller",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(Controller)18113",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:101"
          },
          {
            "label": "_uniswapV2Router",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IUniswapV2Router02)17646",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:102"
          },
          {
            "label": "_uniswapV2Pair",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IUniswapV2Pair)17250",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:103"
          },
          {
            "label": "_usdcAddr",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:104"
          },
          {
            "label": "_mndContract",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IMND)19996",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:105"
          },
          {
            "label": "lpWallet",
            "offset": 0,
            "slot": "8",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:106"
          },
          {
            "label": "companyWallet",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:107"
          },
          {
            "label": "vatReceiverWallet",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:108"
          },
          {
            "label": "_priceTiers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint8,t_struct(PriceTier)20019_storage)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:110"
          },
          {
            "label": "licenses",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(License)20032_storage)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:111"
          },
          {
            "label": "registeredNodeAddresses",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:112"
          },
          {
            "label": "nodeToLicenseId",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:113"
          },
          {
            "label": "userUsdMintedAmount",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:114"
          },
          {
            "label": "usedInvoiceUUIDs",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:115"
          },
          {
            "label": "lastLicensePrice",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:117"
          },
          {
            "label": "lastLicensePriceTier",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:118"
          },
          {
            "label": "maxAllowedPriceDifference",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:119"
          },
          {
            "label": "lastLicensePriceTimestamp",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:120"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(Controller)18113": {
            "label": "contract Controller",
            "numberOfBytes": "20"
          },
          "t_contract(IMND)19996": {
            "label": "contract IMND",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Pair)17250": {
            "label": "contract IUniswapV2Pair",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Router02)17646": {
            "label": "contract IUniswapV2Router02",
            "numberOfBytes": "20"
          },
          "t_contract(R1)22763": {
            "label": "contract R1",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(License)20032_storage)": {
            "label": "mapping(uint256 => struct License)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_struct(PriceTier)20019_storage)": {
            "label": "mapping(uint8 => struct PriceTier)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(License)20032_storage": {
            "label": "struct License",
            "members": [
              {
                "label": "nodeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalClaimedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastClaimEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "assignTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lastClaimOracle",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "isBanned",
                "type": "t_bool",
                "offset": 20,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(PriceTier)20019_storage": {
            "label": "struct PriceTier",
            "members": [
              {
                "label": "usdPrice",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalUnits",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "soldUnits",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "0e334d7ba8d2b92184eda7cac57466dfbfa363e2bda47367a9c43161e1271636": {
      "address": "0xdd310992bC85D187180911a0715a36F81F466C18",
      "txHash": "0xf823624828e6f7968f02fe6b61a38d08a46ceb7ee4f0f36b4ac6d035cee10f9a",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "LOGISTIC_PLATEAU",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:75"
          },
          {
            "label": "K",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:76"
          },
          {
            "label": "MID_PRC",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(SD59x18)14517",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:77"
          },
          {
            "label": "_supply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:93"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:94"
          },
          {
            "label": "_R1Token",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(R1)19691",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:96"
          },
          {
            "label": "_controller",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(Controller)17475",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:97"
          },
          {
            "label": "_ndContract",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IND)17504",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:98"
          },
          {
            "label": "lpWallet",
            "offset": 0,
            "slot": "8",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:99"
          },
          {
            "label": "expensesWallet",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:100"
          },
          {
            "label": "marketingWallet",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:101"
          },
          {
            "label": "grantsWallet",
            "offset": 0,
            "slot": "11",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:102"
          },
          {
            "label": "csrWallet",
            "offset": 0,
            "slot": "12",
            "type": "t_address",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:103"
          },
          {
            "label": "totalLicensesAssignedTokensAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:105"
          },
          {
            "label": "licenses",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_uint256,t_struct(License)17535_storage)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:106"
          },
          {
            "label": "registeredNodeAddresses",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:107"
          },
          {
            "label": "nodeToLicenseId",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:108"
          },
          {
            "label": "initiatedTransferReceiver",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_address,t_address)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:110"
          },
          {
            "label": "initiatedBurn",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "MNDContract",
            "src": "contracts/MNDContract.sol:111"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(Controller)17475": {
            "label": "contract Controller",
            "numberOfBytes": "20"
          },
          "t_contract(IND)17504": {
            "label": "contract IND",
            "numberOfBytes": "20"
          },
          "t_contract(R1)19691": {
            "label": "contract R1",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(License)17535_storage)": {
            "label": "mapping(uint256 => struct License)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(License)17535_storage": {
            "label": "struct License",
            "members": [
              {
                "label": "nodeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalAssignedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalClaimedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "firstMiningEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lastClaimEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "assignTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "lastClaimOracle",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_userDefinedValueType(SD59x18)14517": {
            "label": "SD59x18",
            "numberOfBytes": "32",
            "underlying": "t_int256"
          },
          "t_int256": {
            "label": "int256"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "881cc6d12260d248902448533ffe6149d46d9af13354c6efd5752dd4f5ed978d": {
      "address": "0x5EB909c9Cc5Ce16911542fbC8D16116B733f7093",
      "txHash": "0x039d5020f46a118a890b35c6cc633667d63f87bbc4db11e8c0771057f3dce472",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "_supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:96"
          },
          {
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:97"
          },
          {
            "label": "currentPriceTier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:98"
          },
          {
            "label": "_R1Token",
            "offset": 1,
            "slot": "2",
            "type": "t_contract(R1)22954",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:100"
          },
          {
            "label": "_controller",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(Controller)18113",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:101"
          },
          {
            "label": "_uniswapV2Router",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IUniswapV2Router02)17646",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:102"
          },
          {
            "label": "_uniswapV2Pair",
            "offset": 0,
            "slot": "5",
            "type": "t_contract(IUniswapV2Pair)17250",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:103"
          },
          {
            "label": "_usdcAddr",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:104"
          },
          {
            "label": "_mndContract",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IMND)20117",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:105"
          },
          {
            "label": "lpWallet",
            "offset": 0,
            "slot": "8",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:106"
          },
          {
            "label": "companyWallet",
            "offset": 0,
            "slot": "9",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:107"
          },
          {
            "label": "vatReceiverWallet",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:108"
          },
          {
            "label": "_priceTiers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint8,t_struct(PriceTier)20140_storage)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:110"
          },
          {
            "label": "licenses",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_struct(License)20153_storage)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:111"
          },
          {
            "label": "registeredNodeAddresses",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:112"
          },
          {
            "label": "nodeToLicenseId",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:113"
          },
          {
            "label": "userUsdMintedAmount",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:114"
          },
          {
            "label": "usedInvoiceUUIDs",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_bool)",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:115"
          },
          {
            "label": "lastLicensePrice",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:117"
          },
          {
            "label": "lastLicensePriceTier",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:118"
          },
          {
            "label": "maxAllowedPriceDifference",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:119"
          },
          {
            "label": "lastLicensePriceTimestamp",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:120"
          },
          {
            "label": "directAddLpPercentage",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "NDContract",
            "src": "contracts/NDContract.sol:121"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(Controller)18113": {
            "label": "contract Controller",
            "numberOfBytes": "20"
          },
          "t_contract(IMND)20117": {
            "label": "contract IMND",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Pair)17250": {
            "label": "contract IUniswapV2Pair",
            "numberOfBytes": "20"
          },
          "t_contract(IUniswapV2Router02)17646": {
            "label": "contract IUniswapV2Router02",
            "numberOfBytes": "20"
          },
          "t_contract(R1)22954": {
            "label": "contract R1",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(License)20153_storage)": {
            "label": "mapping(uint256 => struct License)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint8,t_struct(PriceTier)20140_storage)": {
            "label": "mapping(uint8 => struct PriceTier)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(License)20153_storage": {
            "label": "struct License",
            "members": [
              {
                "label": "nodeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalClaimedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lastClaimEpoch",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "assignTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "lastClaimOracle",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "isBanned",
                "type": "t_bool",
                "offset": 20,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(PriceTier)20140_storage": {
            "label": "struct PriceTier",
            "members": [
              {
                "label": "usdPrice",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "totalUnits",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "soldUnits",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
            }
          ],
          "erc7201:openzeppelin.storage.Ownable": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
            }
          ],
          "erc7201:openzeppelin.storage.Pausable": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721URIStorage": [
            {
              "contract": "ERC721URIStorageUpgradeable",
              "label": "_tokenURIs",
              "type": "t_mapping(t_uint256,t_string_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721Enumerable": [
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:21"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:22"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:24"
            },
            {
              "contract": "ERC721EnumerableUpgradeable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:25"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "ac1d2f05b255028ad0c15b2497f1c46c3748bf1223f526f84cef94148e3d247b": {
      "address": "0x34a998B8B2a637aF2EC19d8F69617Ef699E46278",
      "txHash": "0x930e6227fcc76ea3fa1817cb464710977253fae01ebe58d583297d0a292409f7",
      "layout": {
        "solcVersion": "0.8.20",
        "storage": [
          {
            "label": "ndContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IND)1373",
            "contract": "Reader",
            "src": "contracts/Reader.sol:80"
          },
          {
            "label": "mndContract",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IMND)1384",
            "contract": "Reader",
            "src": "contracts/Reader.sol:81"
          },
          {
            "label": "controller",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(Controller)1260",
            "contract": "Reader",
            "src": "contracts/Reader.sol:82"
          }
        ],
        "types": {
          "t_contract(Controller)1260": {
            "label": "contract Controller",
            "numberOfBytes": "20"
          },
          "t_contract(IMND)1384": {
            "label": "contract IMND",
            "numberOfBytes": "20"
          },
          "t_contract(IND)1373": {
            "label": "contract IND",
            "numberOfBytes": "20"
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_bool": {
            "label": "bool"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    }
  }
}
